> Time complexity depends on what procedure you take to implement a task;

> In an array for finding an element, inserting an element, deleting an element
  searching an element, time complexity is O(n) if array is of n-element;

> If an array of n elements gets divided by 2 like
  for(int i=n; i>1; i=i/2){
    // statements
  }
  > Time complexity of this operation is logN base 2 as it is dividing each loop by 2;

> Time complexity for nXn matrix is O(n^2) while for a row or a column it'll be O(n);
> Array of structure time complexity will be O(m+n) simply O(n);
> If you're spending time along with a binary tree then TC will be logN;
> If you're traversing all elements of a BT then TC will be O(n);

>> Space Complexity:
> Array of n-elements then O(n);
> Linked list if n-elements then 2n that is also O(n);
> A 2D matrix take space of O(n^2);
> A array or list of structures takes O(m+n);
> A binary tree takes space of O(n);

> TC and SC from program codes:
> Functions:

void swap(x,y){
    temp;
    temp = x; //1
    x = y; //1
    y = temp; //1
}
f(n) = 3
so 3 is constant and the degree of constant is 1 like
so n^0 is equal to 1;
so O(n^0) = O(1) so function swap() will take constant time;

int sum(int A[], int n){
    int s,i;
    s = 0; // 1
    for(i=0; i<n; i++){ // 1+ n+1+ n = 2n+2
        s = s+A[i];// n 
    }
    return s; //1
}
f(n) = 1+2n+2+n+1 = 3n+4 and degree of this function is 1 that is n^1;
so TC of function sum is O(n);

void Add(int n){
    int i,j;
    for(i=0; i<n; i++){ // n+1
        for(j=0; j<n; j++){ // n*(n+1) because it will run n+1 times
            c[i][j] = a[i][j]+b[i][j]; // n*n because it will run n times;
        }
    }
}
f(n) = n+1+n*(n+1)+n*n = 2n^2+2n+1 and degree of this function is 2 so O(n^2);
so TC of function Add()  is O(n^2);

> So we take time complexity as the highest degree of a function;

fun1(){
    fun2(); //n+1
}
fun2(){
    for(int i=0; i<n; i++){ // n+1

    }
}
What is the time complexity of fun1()?
So fun2() will be called inside fun1() so tc for fun2() is O(n) and inside fun1() 
fun2() is called so TC of fun1() is O(n);


>> There are three ways to represent the time complexity:
> We use Omega - Ω to represent the best case or casually we uses best case of big(O);
> We use Theta - Θ to represent the average case or casually we uses avg case of big(O);
> We use Omicron - O or Big O to represent the worst case Big-O;

>> Time complexities from best to worst:
> O(1) - Constant (Will execute the code for constant number of times)
> log(n) - second best time complexity. (Divide and Conquer)
Example: To get a number from a sorted array of 8 elements we need 3 steps to get that 
         by divide them into half(No. of elements).
         So, 2 raised to the third power = 8 
         Or, log base 2 of 8 = 3, means 3 step to find a number in an array dividing by half.
         so finding a number from an array of n numbers can be done in O(log n) time complexity.
         
> O(n) - Linear time complexity. like a loop. (Proportional)
> O(nlog n) - some sorting algorithms, quick and merge sort
> O(n^2) - Big O of n square, like a loop inside another loop of n numbers. Loop within a loop.
> and so on....

>> Plain english explanation of big O https://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation
>> https://www.bigocheatsheet.com/