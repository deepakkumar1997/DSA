> Time complexity depends on what procedure you take to implement a task;

> In an array for finding an element, inserting an element, deleting an element
  searching an element time complexity is O(n) if array is of n-element;

> If an array of n element get divided by 2 like
  for(int i=n; i>1; i=i/2){
    // statements
  }
  > Time complexity of this operation is logN base 2 as it is dividing each loop by 2;

> Time complexity for nXn matrix is O(n^2) while for a row or a column it'll be O(n);
> Array of structure time complexity will be O(m+n) simply O(n);
> If you're spending time along with a binary tree then TC will be logN;
> If you're traversing all elements of a BT then TC will be O(n);

>> Space Complexity:
> Array if n-elements then O(n);
> Linked list if n-elements then 2n that is also O(n);
> A 2D matrix take space of O(n^2);
> A array or list of structure takes O(m+n);
> A binary tree takes space of O(n);

> TC and SC from program codes:
> Functions:

void swap(x,y){
    temp;
    temp = x; //1
    x = y; //1
    y = temp; //1
}
f(n) = 3
so 3 is constant and degree of constant is 1 like
so n^0 is equal to 1;
so O(n^0) = O(1) so function swap() will take constant time;

int sum(int A[], int n){
    int s,i;
    s = 0; // 1
    for(i=0; i<n; i++){ // 1+ n+1+ n = 2n+2
        s = s+A[i];// n 
    }
    return s; //1
}
f(n) = 1+2n+2+n+1 = 3n+4 and degree of this function is 1 that is n^1;
so TC of function sum is O(n);

void Add(int n){
    int i,j;
    for(i=0; i<n; i++){ // n+1
        for(j=0; j<n; j++){ // n*(n+1) becuase it will run n+1 times
            c[i][j] = a[i][j]+b[i][j]; // n*n becuase it will run n times;
        }
    }
}
f(n) = n+1+n*(n+1)+n*n = 2n^2+2n+1 and degree of this function is 2 so O(n^2);
so TC of function Add()  is O(n^2);

> So we take time complexity as highest degree of a function;

fun1(){
    fun2(); //n+1
}
fun2(){
    for(int i=0; i<n; i++){ // n+1

    }
}
What is time complexity of fun1()?
So fun2() will be called inside fun1() so tc for fun2() is O(n) and inside fun1() 
fun2() is called so TC of fun1() is O(n);