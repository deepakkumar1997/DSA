> Memory is divided into a smaller addressable unit that is called a "byte" and every byte
  has its address in the memory;
> An main memory is divided into segments usually 64byte;

> How a program uses or utilizes main memory?
  > An entire main memory segment is divided into three sections and used by a program;
  > In these three sections one of the programs is loaded another two are called stack
    memory and heap memory;
  e.g.:
  void main(){
    int a; // 4 bytes (memory assigned in the stack)
    double b; // 8 bytes(memory assigned in stack)
  }
  > So here memory assigned to the main() function is 12 bytes and inside stack memory is 12 
    bytes of memory will be reserved as a separate frame for this main function and
    this is called as "stack frame" or "Activation Record" of the main function;

> Static memory allocation: So how much memory is required to run the program is decided
  at compile is called static memory allocation; 

> Stack Memory:
fun2(int i){
    int j
}
fun1(){
    int x;
    fun2(x);
}
void main(){
    int a;
    float b;
    fun1();
}
> So when we run this program then all these instructions will be brought into the main 
  memory and a segment of memory will be created for this program and then we know 
  that a segment has three sections in one section all instructions(code) resides
  and then the main() function will be executed first and then it will get its 
  activation record created and while executing main() function fun1() will be called
  and fun1() will get his own activation record and while fun1() is executing then 
  fun2() will called and fun2() will also gets his own activation record so when fun2()
  gets executed then it will be released from the memory and then control will come back
  to fun1() and when fun1() will get executed then control will go back to main() func
  and fun1() will be released from memory and then main() will executed and it will be
  released from memory and the program ends;
  > So this execution of the program works like a stack and that's why we call this memory as
    stack memory;

*> Every function call creates a new activation record at the top of the calling function;

> Heap Memory: The term heap can be used for organized things as well as unorganized things;
> So heap is an unorganized memory;
> Heap memory is treated as a resource by a program so once it is used then release it so
  another program can use these resources;
> Program can not access heap memory directly. It can access stack but not heap as it is
  treated as a resource;
> In cpp programs we can use a pointer to access heap memory;
e.g.:
void main(){
    int *p; // pointer p gets memory in stack;
    p = new int[5]; // now pointer p will hold the address of the first block of the  
                    // memory created in heap;
    delete []p; // releasing memory explicitly in cpp but java do implicitly;
}